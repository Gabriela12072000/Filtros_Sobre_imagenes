# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mKOa9ODHGiTQjZvgzci15wJ8RfQUWuRJ
"""

import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy as np
import cv2
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# 1. Cargar el dataset CIFAR-10
transform = transforms.Compose([transforms.ToTensor()])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
testset  = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

trainloader = torch.utils.data.DataLoader(trainset, batch_size=100, shuffle=True)
testloader  = torch.utils.data.DataLoader(testset, batch_size=100, shuffle=False)

# 2. Aplicar filtro Sobel a una copia del dataset
def apply_sobel(img_tensor):
    img_np = img_tensor.numpy().transpose((1, 2, 0))
    gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)
    sobel = cv2.Sobel(gray, cv2.CV_64F, 1, 1, ksize=3)
    sobel = np.clip(sobel, 0, 1)
    return torch.tensor(sobel).unsqueeze(0).repeat(3, 1, 1).float()

class SobelCIFAR10(torchvision.datasets.CIFAR10):
    def __getitem__(self, index):
        img, target = self.data[index], self.targets[index]
        img = Image.fromarray(img)
        img = transform(img)
        img = apply_sobel(img)
        return img, target

sobel_trainset = SobelCIFAR10(root='./data', train=True, download=False, transform=None)
sobel_testset  = SobelCIFAR10(root='./data', train=False, download=False, transform=None)

sobel_trainloader = torch.utils.data.DataLoader(sobel_trainset, batch_size=100, shuffle=True)
sobel_testloader  = torch.utils.data.DataLoader(sobel_testset, batch_size=100, shuffle=False)

# 3. Definir una CNN simple
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3, padding=1)
        self.pool  = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)
        self.fc1   = nn.Linear(64 * 8 * 8, 128)
        self.fc2   = nn.Linear(128, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 64 * 8 * 8)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# 4. Función de entrenamiento
def train_model(model, trainloader, testloader, epochs=5):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    for epoch in range(epochs):
        model.train()
        running_loss = 0.0
        for inputs, labels in trainloader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        print(f"Epoch {epoch+1}, Loss: {running_loss:.3f}")

    # Evaluar
    model.eval()
    y_true, y_pred = [], []
    with torch.no_grad():
        for inputs, labels in testloader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            _, predicted = torch.max(outputs, 1)
            y_true.extend(labels.cpu().numpy())
            y_pred.extend(predicted.cpu().numpy())

    acc = accuracy_score(y_true, y_pred)
    return acc

# 5. Entrenar y comparar modelos
print("Entrenando modelo SIN filtro Sobel...")
model_original = SimpleCNN()
acc_original = train_model(model_original, trainloader, testloader)

print("\nEntrenando modelo CON filtro Sobel...")
model_sobel = SimpleCNN()
acc_sobel = train_model(model_sobel, sobel_trainloader, sobel_testloader)

# 6. Resultados
print(f"\nPrecisión sin filtro Sobel: {acc_original*100:.2f}%")
print(f"Precisión con filtro Sobel: {acc_sobel*100:.2f}%")

if acc_sobel > acc_original:
    print("✅ El filtro Sobel MEJORA el rendimiento del modelo.")
else:
    print("⚠️ El filtro Sobel NO mejora el rendimiento del modelo.")